import xlrd
import sqlite3
import os

###### 1 пункт

#Необходимо создать таблицу по анкетным данным

conn = sqlite3.connect("credits_info.db")
cursor = conn.cursor()
cursor.execute("""create table app_form(id integer,
    employed_By varchar, 
    education varchar,
    children integer,
    family integer,
    mar_status varchar,
    city varchar,
    position varchar,
    income integer,
    inc_type varchar,
    housing varchar,
    housing_own varchar,
    car_age integer) """)

for a in os.listdir("C:/Users/User/Desktop/Магистратура/IT/анкеты-20181127T200933Z-001/анкеты/"):
    a1 = "C:/Users/User/Desktop/Магистратура/IT/анкеты-20181127T200933Z-001/анкеты/" + a
    data = xlrd.open_workbook(a1)
    sheet = data.sheet_by_index(0)

    feature = [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    what = ['Identity Number', 'Employed By','Education','Children','Family', 'Marital Status', 'City', 'Position', 'Income', 'Income Type', 'Housing', 'House ownership', 'Age of Car (if owned)']
    app_row = sheet.nrows
    app_column = sheet.ncols

    for i in range(app_row):
        for j in range(app_column):
            for v in range(13):
                if sheet.cell(i, j).value == what[v]:
                    feature[v] = sheet.cell(i + 1, j).value

sql = "insert into app_form(id, employed_By, education, children, family, mar_status, city, position, income, inc_type, housing, housing_own, car_age) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
    cursor.execute(sql, (feature[0], feature[1], feature[2], feature[3], feature[4], feature[5], feature[6], feature[7],feature[8], feature[9], feature[10], feature[11], feature[12]))

    sql3 = "commit"
    cursor.execute(sql3)
    print(a)
    
conn.commit()

#Вывод таблицы по анкетным данным
conn = sqlite3.connect("credits_info.db")
cursor = conn.cursor()
sql = "select * from app_form"
cursor.execute(sql)
for row in cursor.execute("select rowid, * from app_form"):
    print(row)
    
 #Далее необходимо создать таблицу по контрактам
conn = sqlite3.connect("credits_info.db")
cursor = conn.cursor()
cursor.execute("""create table contracts (id integer,
               contract_numb text,
               amount integer,
               type text,
               term integer,
               annuity integer)""")  
    
import os
for a in os.listdir("C:/Users/User/Desktop/Магистратура/IT/контракты-201811275841DVS87C-001/контракты/"):
    a1 = "C:/Users/User/Desktop/Магистратура/IT/контракты-201811275841DVS87C-001/контракты/" + a
    data = xlrd.open_workbook(a1)
    sheet = data.sheet_by_index(0)

    feature = [0, 1, 0, 0, 0, 0]
    what = ['Identity Number', 'Contract Number', 'Amount', 'Type', 'Term (month)', 'Annuity']
    contr_row = sheet.nrows
    contr_column = sheet.ncols

    for i in range(contr_row):
        for j in range(contr_column):
            for v in range(6):
                if sheet.cell(i, j).value == what[v]:
                    feature[v] = sheet.cell(i + 1, j).value
    
   # SQL
    sql = "insert into contracts(id, contract_numb, amount, type, term, annuity) VALUES (?, ?, ?, ?, ?, ?)"
    cursor.execute(sql, (feature[0], feature[1], feature[2], feature[3], feature[4], feature[5]))

    sql4 = "commit"
    cursor.execute(sql4)
    print(a)

conn.commit()  


#Вывод таблицы по контрактам

conn = sqlite3.connect("credits_info.db")
cursor = conn.cursor()
sql = "SELECT * FROM contracts"
    cursor.execute(sql)
    for row in cursor.execute("SELECT rowid, * from contract"):
        print(row)



#Необходимо объединить таблицы по анкетным данным и контрактам

import sqlite3
con = sqlite3.connect("credita_info.db")
with con:
    cursor = con.cursor()
    cursor.execute("SELECT * FROM app_form INNER JOIN contracts ON app_form.id = contracts.id")
    rows = cursor.fetchall()
for row in rows:
        print (row)

con.commit()


con = sqlite3.connect("credits_info.db")
cursor = con.cursor()
sql = "SELECT * FROM app_form"
cursor.execute(sql)
for row in cursor.execute("SELECT rowid, * from app_form"):
    print(row)
con.commit()



##### 2 пункт
#### Проверка корректности значений в таблицах
### Анкеты

con = sqlite3.connect("credit.db")
with con:
    cursor = con.cursor()

#Поле children должно содержать только положительные значения

cursor.execute("SELECT COUNT(*) FROM app_form WHERE children < 0")
app_form_error1 = cursor.fetchone()[0]
rows = cursor.fetchall()
if app_form_error1 > 0:
    cursor.execute("DELETE FROM app_form WHERE children < 0")
else:
    print("Children data is ok")


#Аналогично для family
cursor.execute("SELECT COUNT(*) FROM app_form WHERE family < 0")
app_form_error2 = cursor.fetchone()[0]
rows = cursor.fetchall()
if app_form_error2 > 0:
    cursor.execute("DELETE FROM app_form WHERE family < 0")
else:
    print("Family data is ok")


#income также не может быть меньше 0
cursor.execute("SELECT COUNT(*) FROM app_form WHERE income < 0")
app_form_error3 = cursor.fetchone()[0]
rows = cursor.fetchall()
if app_form_error3 > 0:
    cursor.execute("DELETE FROM app_form WHERE income < 0")
else:
    print("Income data is ok")
    
    
#Нарушение единства обозначений housing
cursor.execute("SELECT housing, COUNT(housing) FROM app_form GROUP BY housing")
rows = cursor.fetchall()
for row in rows:
    print(row)


#Нарушение единства обозначений mar_status
cursor.execute("SELECT mar_status, COUNT(mar_status) FROM app_form GROUP BY mar_status")
rows = cursor.fetchall()
for row in rows:
    print(row)

cursor.execute("UPDATE app_form SET mar_status = 'no data' WHERE  mar_status IS NULL")


#Нарушение единства обозначений education
cursor.execute("SELECT education, COUNT(educaction) FROM app_form GROUP BY education")
rows = cursor.fetchall()
for row in rows:
    print(row)

#Нарушение единства обозначений employed_By
cursor.execute("SELECT employed_By, COUNT(employed_By) FROM app_form GROUP BY employed_By")
rows = cursor.fetchall()
for row in rows:
    print(row)


### Контракты

con = sqlite3.connect("credits_info.db")
with con:
    cursor = con.cursor()

#Сумма кредита больше 0
cursor.execute("SELECT COUNT(*) FROM contracts WHERE amount < 0")
contracts_error1 = cursor.fetchone()[0]
rows = cursor.fetchall()
if contracts_error1 > 0:
    print(rows)
    cursor.execute("DELETE FROM contracts WHERE amount < 0")
if contracts_error1 == 0:
    print("Amount data is ok")

#Сумма аннуитета больше 0
cursor.execute("SELECT COUNT(*) FROM contracts WHERE annuity < 0")
contracts_error2 = cursor.fetchone()[0]
rows = cursor.fetchall()
if contracts_error2 > 0:
    print(rows)
    cursor.execute("DELETE FROM contracts WHERE annuity < 0")
if contracts_error2 == 0:
    print("Annuity data is ok")
    
    
#Срок кредита больше 0
cursor.execute("SELECT COUNT(*) FROM contracts WHERE term < 0")
contracts_error3 = cursor.fetchone()[0]
rows = cursor.fetchall()
if contracts_error3 > 0:
    print(rows)
    cursor.execute("DELETE FROM contracts WHERE term < 0")
if contracts_error3 == 0:
    print("Term data is ok")

#Нарушение единства обозначений type
cursor.execute("SELECT type, COUNT(type) FROM contracts GROUP BY type")
rows = cursor.fetchall()
for row in rows:
    print(row)
